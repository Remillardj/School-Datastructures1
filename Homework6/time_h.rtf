{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;\red0\green128\blue0;\red0\green0\blue0;\red0\green0\blue255;
\red163\green21\blue21;\red43\green131\blue159;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c50200\c0;\csgenericrgb\c0\c0\c0;\csgenericrgb\c0\c0\c100000;
\csgenericrgb\c63900\c8200\c8200;\csgenericrgb\c16900\c51200\c62500;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \CocoaLigature0 //\cf3 \
\cf2 //  Time.h\cf3 \
\cf2 //  Homework6\cf3 \
\cf2 //\cf3 \
\cf2 //  Created by Jaryd Remillard on 2/23/17.\cf3 \
\cf2 //\cf3 \
\
\cf4 #include \cf5 <string>\cf4 \
using\cf3  \cf4 namespace\cf3  \cf6 std\cf3 ;\
\
\cf2 /*\
 Time is a class object that can create a clock that essentially can be modified\
 from user inputs, or initiated by the systems clock timer.\
*/\cf3 \
\cf4 class\cf3  Time \{\
\cf4 public\cf3 :\
    Time(); \cf2 //create object\cf3 \
    \cf2 // create construct for user input\cf3 \
    \cf2 // if any of user input is a negative, then by default\cf3 \
    \cf2 // it will use the system time instead\cf3 \
    Time(\cf4 const\cf3  \cf4 int\cf3  h, \cf4 const\cf3  \cf4 int\cf3  m, \cf4 const\cf3  \cf4 int\cf3  s);\
    \
    \cf2 // initiate getter and setter for the hours modifier\cf3 \
    \cf2 // setHours() requires an integer input, and getHours()\cf3 \
    \cf2 // returns an integer\cf3 \
    \cf4 int\cf3  getHours() \cf4 const\cf3 ;\
    \cf4 void\cf3  setHours(\cf4 int\cf3  n);\
    \
    \cf2 // initiate getter and setter for minutes modifier\cf3 \
    \cf2 // setMinutes() requires an integer input, and getMinutes()\cf3 \
    \cf2 // returns an integer\cf3 \
    \cf4 int\cf3  getMinutes() \cf4 const\cf3 ;\
    \cf4 void\cf3  setMinutes(\cf4 int\cf3  n);\
    \
    \cf2 // initiate getter and setter for seconds modifier\cf3 \
    \cf2 // getSeconds() requires an integer input, and getSeconds()\cf3 \
    \cf2 // returns an integer\cf3 \
    \cf4 int\cf3  getSeconds() \cf4 const\cf3 ;\
    \cf4 void\cf3  setSeconds(\cf4 int\cf3  n);\
    \
    \cf2 /*\
     increment the respective values by a number that the user inputs\
     and roll over remaining amount into the next section.\
     for example; inputting 75 into incrementHours(75), will add to the clock\
     1 minute and 15 seconds.\
    */\cf3 \
    \cf4 void\cf3  incrementSeconds(\cf4 int\cf3  n);\
    \cf4 void\cf3  incrementMinutes(\cf4 int\cf3  n);\
    \cf4 void\cf3  incrementHours(\cf4 int\cf3  n);\
    \
    \cf2 // default value is 24 hour format\cf3 \
    \cf2 // convert integers into a 24 hour clock\cf3 \
    \cf6 string\cf3  get24HourFormat() \cf4 const\cf3 ;\
    \cf2 // convert the 24 hour fomrat to a 12 hour format\cf3 \
    \cf2 // and uses logic to output correct AM or PM format\cf3 \
    \cf6 string\cf3  get12HourAmPmFormat();\
    \
\cf4 private\cf3 :\
    \cf4 int\cf3  hour;\
    \cf4 int\cf3  minute;\
    \cf4 int\cf3  second;\
\};}