{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;\red0\green128\blue0;\red0\green0\blue0;\red0\green0\blue255;
\red163\green21\blue21;\red43\green131\blue159;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c50200\c0;\csgenericrgb\c0\c0\c0;\csgenericrgb\c0\c0\c100000;
\csgenericrgb\c63900\c8200\c8200;\csgenericrgb\c16900\c51200\c62500;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \CocoaLigature0 //\cf3 \
\cf2 //  Time.cpp\cf3 \
\cf2 //  Homework6\cf3 \
\cf2 //\cf3 \
\cf2 //  Created by Jaryd Remillard on 2/23/17.\cf3 \
\cf2 //\cf3 \
\
\cf4 #include \cf5 <iostream>\cf4 \
#include \cf5 <time.h>\cf4 \
#include \cf5 <sstream>\cf4 \
#include \cf5 <iomanip>\cf4 \
#include \cf5 <string>\cf4 \
\cf3 \
\cf4 #include \cf5 "Time.h"\cf4 \
\cf3 \
\cf4 using\cf3  \cf4 namespace\cf3  \cf6 std\cf3 ;\
\
\cf2 /*\
 create the default Time() object by setting the values of\
 hour, minute, second to the system time\
*/\cf3 \
\cf6 Time\cf3 ::Time()\
\{\
    \cf6 time_t\cf3  now;\
    \cf4 struct\cf3  \cf6 tm\cf3  tstruct;\
    \
    \cf6 time\cf3 (&now);\
    tstruct = *\cf6 localtime\cf3 (&now);\
    \
    \cf6 hour\cf3  = tstruct.\cf6 tm_hour\cf3 ;\
    \cf6 minute\cf3  = tstruct.\cf6 tm_min\cf3 ;\
    \cf6 second\cf3  = tstruct.\cf6 tm_sec\cf3 ;\
\}\
\
\cf2 /*\
 use user inputted values for the respective time slot\
 and by default, increment into the respective places.\
 if the input is set to 0, then use the system time in place of that.\
 for example: user inputs -1 for int h. It will replace hour\
 with whatever time it is, for example, 7am, so 7.\
 The purpose of this is to prevent users from inputting an invalid clock number\
*/\cf3 \
\cf6 Time\cf3 ::Time(\cf4 int\cf3  h, \cf4 int\cf3  m, \cf4 int\cf3  s)\
\{\
    \cf4 if\cf3  ((h >= 0) && (m >= 0) && (s >= 0)) \{\
        \cf6 incrementSeconds\cf3 (s);\
        \cf6 incrementMinutes\cf3 (m);\
        \cf6 incrementHours\cf3 (h);\
    \}\
    \
    \cf6 time_t\cf3  now;\
    \cf4 struct\cf3  \cf6 tm\cf3  tstruct;\
    \
    \cf6 time\cf3 (&now);\
    tstruct = *\cf6 localtime\cf3 (&now);\
    \
    \cf4 if\cf3  (h < 0)\
        \cf6 hour\cf3  = tstruct.\cf6 tm_hour\cf3 ;\
    \cf4 if\cf3  (m < 0)\
        \cf6 minute\cf3  = tstruct.\cf6 tm_min\cf3 ;\
    \cf4 if\cf3  (s < 0)\
        \cf6 second\cf3  = tstruct.\cf6 tm_sec\cf3 ;\
\}\
\
\cf4 int\cf3  \cf6 Time\cf3 ::getHours() \cf4 const\cf3 \
\{\
    \cf4 return\cf3  \cf6 hour\cf3 ;\
\}\
\
\cf4 int\cf3  \cf6 Time\cf3 ::getMinutes() \cf4 const\cf3 \
\{\
    \cf4 return\cf3  \cf6 minute\cf3 ;\
\}\
\
\cf4 int\cf3  \cf6 Time\cf3 ::getSeconds() \cf4 const\cf3 \
\{\
    \cf4 return\cf3  \cf6 second\cf3 ;\
\}\
\
\cf2 // Set hour to user defined preference, and roll over if exceeding 24 hours.\cf3 \
\cf4 void\cf3  \cf6 Time\cf3 ::setHours(\cf4 int\cf3  n)\
\{\
    \cf4 if\cf3  (n >= 0) \{\
        \cf6 hour\cf3  = n;\
        \cf4 if\cf3  (\cf6 hour\cf3  > 23) \{\
            \cf6 hour\cf3  = \cf6 hour\cf3  % 24;\
        \}\
    \} \cf4 else\cf3  \{\
        \cf6 cout\cf3  << \cf5 "Can't set hour to less than 0. Setting to 0"\cf3  << \cf6 endl\cf3 ;\
        \cf6 hour\cf3  = 0;\
    \}\
\}\
\
\cf2 // set minute to user defined preference and roll over excess minutes if over 60\cf3 \
\cf4 void\cf3  \cf6 Time\cf3 ::setMinutes(\cf4 int\cf3  n)\
\{\
    \cf4 if\cf3  (n >= 0) \{\
        \cf6 minute\cf3  = n;\
        \cf4 if\cf3  (\cf6 minute\cf3  >= 60) \{\
            \cf4 int\cf3  temp = \cf6 minute\cf3  / 60;\
            \cf6 minute\cf3  = \cf6 minute\cf3  % 60;\
            \cf6 incrementHours\cf3 (temp);\
        \}\
    \} \cf4 else\cf3  \{\
        \cf6 cout\cf3  << \cf5 "Can't set minute to less than 0. Setting to 0."\cf3  << \cf6 endl\cf3 ;\
        \cf6 minute\cf3  = 0;\
    \}\
\}\
\
\cf2 // set any amount of seconds from user inputted preference, and roll over excess\cf3 \
\cf2 // to minutes and hours if necessary\cf3 \
\cf4 void\cf3  \cf6 Time\cf3 ::setSeconds(\cf4 int\cf3  n)\
\{\
    \cf4 if\cf3  (n >= 0) \{\
        \cf6 second\cf3  = n;\
        \cf4 if\cf3  (\cf6 second\cf3  >= 60) \{\
            \cf4 int\cf3  temp = \cf6 second\cf3  / 60;\
            \cf6 incrementMinutes\cf3 (temp);\
            \cf6 second\cf3  = \cf6 second\cf3  % 60;\
        \}\
    \} \cf4 else\cf3  \{\
        \cf6 cout\cf3  << \cf5 "Can't set second to less than 0. Setting to 0."\cf3  << \cf6 endl\cf3 ;\
        \cf6 second\cf3  = 0;\
    \}\
\}\
\
\cf2 // add user inputted amount of hours to current set\cf3 \
\cf2 // and properly roll over hours if it exceeds 23, by resetting it back to 0\cf3 \
\cf2 // and add remaining hours\cf3 \
\cf4 void\cf3  \cf6 Time\cf3 ::incrementHours(\cf4 int\cf3  n)\
\{\
    \cf4 if\cf3  (n >= 0) \{\
        \cf6 hour\cf3  += n;\
        \cf4 if\cf3  (\cf6 hour\cf3  > 23) \{\
            \cf6 hour\cf3  = \cf6 hour\cf3  % 24;\
        \}\
    \} \cf4 else\cf3  \{\
        \cf6 cout\cf3  << \cf5 "Can't increment hours by less than zero."\cf3  << \cf6 endl\cf3 ;\
    \}\
\}\
\
\cf2 // increment the minutes by user inputted amount and roll over to hours if\cf3 \
\cf2 // minute is exceeding total of 60 minutes.\cf3 \
\cf4 void\cf3  \cf6 Time\cf3 ::incrementMinutes(\cf4 int\cf3  n)\
\{\
    \cf4 if\cf3  (n >= 0) \{\
        \cf6 minute\cf3  += n;\
        \cf4 if\cf3  (\cf6 minute\cf3  >= 60) \{\
            \cf4 int\cf3  temp = \cf6 minute\cf3  / 60;\
            \cf6 minute\cf3  = \cf6 minute\cf3  % 60;\
            \cf6 incrementHours\cf3 (temp);\
        \}\
    \} \cf4 else\cf3  \{\
        \cf6 cout\cf3  << \cf5 "Can't increment minutes by less than zero."\cf3  << \cf6 endl\cf3 ;\
    \}\
\}\
\
\cf2 // increment the second by user inputted amount and roll over to minutes if\cf3 \
\cf2 // second is equal too or exceeding total of 60 seconds.\cf3 \
\cf4 void\cf3  \cf6 Time\cf3 ::incrementSeconds(\cf4 int\cf3  n)\
\{\
    \cf4 if\cf3  (n >= 0) \{\
        \cf6 second\cf3  += n;\
        \cf4 if\cf3  (\cf6 second\cf3  >= 60) \{\
            \cf4 int\cf3  temp = \cf6 second\cf3  / 60;\
            \cf6 incrementMinutes\cf3 (temp);\
            \cf6 second\cf3  = \cf6 second\cf3  % 60;\
        \}\
    \} \cf4 else\cf3  \{\
        \cf6 cout\cf3  << \cf5 "Can't increment seconds by less than zero."\cf3  << \cf6 endl\cf3 ;\
    \}\
\}\
\
\cf6 string\cf3  \cf6 Time\cf3 ::get24HourFormat() \cf4 const\cf3 \
\{\
    \cf6 ostringstream\cf3  oss;\
    oss << \cf6 setfill\cf3 ('0');\
    \
    oss << \cf6 setw\cf3 (2) << \cf6 hour\cf3  << \cf5 ":"\cf3  << \cf6 setw\cf3 (2) << \cf6 minute\cf3  << \cf5 ":"\cf3  << \cf6 setw\cf3 (2) << \cf6 second\cf3 ;\
    \
    \cf4 return\cf3  (oss.\cf6 str\cf3 ());\
\}\
\
\cf6 string\cf3  \cf6 Time\cf3 ::get12HourAmPmFormat()\
\{\
    \cf6 ostringstream\cf3  oss;\
    \cf6 string\cf3  timeFrame = \cf5 "PM"\cf3 ;\
    \cf4 int\cf3  temp = \cf6 hour\cf3 ;\
    \
    \cf4 if\cf3  (temp > 11) \{\
        temp = temp - 12;\
    \} \cf4 else\cf3  \{\
        timeFrame = \cf5 "AM"\cf3 ;\
    \}\
    \
    \cf4 if\cf3  (temp == 0) \{\
        timeFrame = \cf5 "AM"\cf3 ;\
        temp = 12;\
    \}\
\
    oss << \cf6 setfill\cf3 ('0');\
    oss << \cf6 setw\cf3 (2) << temp << \cf5 ":"\cf3  << \cf6 setw\cf3 (2) << \cf6 minute\cf3  << \cf5 ":"\cf3  << \cf6 setw\cf3 (2) << \cf6 second\cf3  << \cf5 " "\cf3  << timeFrame;\
    \
    \cf4 return\cf3  (oss.\cf6 str\cf3 ());\
    \
\}\
\
\
\
\
\
\
}